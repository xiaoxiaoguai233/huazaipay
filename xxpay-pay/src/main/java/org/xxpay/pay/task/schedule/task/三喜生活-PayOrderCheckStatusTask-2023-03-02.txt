package org.xxpay.pay.task.schedule.task;

import com.alibaba.fastjson.JSONObject;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.springframework.beans.factory.annotation.Autowired;
import org.xxpay.core.common.constant.PayConstant;
import org.xxpay.core.common.util.MyLog;
import org.xxpay.core.entity.PayOrder;
import org.xxpay.core.entity.ZHshAccount;
import org.xxpay.pay.mq.BaseNotify4MchPay;
import org.xxpay.pay.service.RpcCommonService;
import org.xxpay.pay.task.schedule.CheckOrderStatusScheduled;
import org.xxpay.pay.util.RedisUtil;

@Slf4j
@Data
public class PayOrderCheckStatusTask implements Runnable {


    private static final MyLog _log = MyLog.getLog(CheckOrderStatusScheduled.class);

    private String key;

    private RpcCommonService rpcCommonService;

    private BaseNotify4MchPay baseNotify4MchPay;

    public PayOrderCheckStatusTask(String key, RpcCommonService rpcCommonService, BaseNotify4MchPay baseNotify4MchPay) {
        this.key = key;
        this.rpcCommonService = rpcCommonService;
        this.baseNotify4MchPay = baseNotify4MchPay;
    }


    @Override
    public void run() {
        // 获取订单参数
        JSONObject params = RedisUtil.getObject(key, JSONObject.class);

        // 获取phone与token
        String phone = params.getString("phone");
        String token = params.getString("token");
        String orderSn = params.getString("orderSn");

        JSONObject jsonObject = new JSONObject();
        jsonObject.put("token", token);
        jsonObject.put("orderSn", orderSn);
        // 获取支付链接
        String body = "";
        try {
            body = Jsoup.connect("http://127.0.0.1:8010/sxsh/voucher")
                    .method(Connection.Method.POST)
                    .header("Content-Type", "*/*")
                    .timeout(20000)
                    .requestBody(jsonObject.toJSONString())
                    .ignoreContentType(true)
                    .execute().body();
        }catch (Exception e){
            // 释放当前号码
            e.printStackTrace();
            return;
        }

        JSONObject json = JSONObject.parseObject(body);
        _log.info("=== 拉起支付回调结果： {} ===", json);

        String payBody = null;
        // 订单状态未支付成功
        if (!json.getString("message").equals("SUCCESS")){
            return;
        }

        // 获取订单的详细信息
        PayOrder payOrder = rpcCommonService.rpcPayOrderService.findByPayOrderId(params.getString("payOrderId"));

        // 更新订单的状态,添加卡密
        String cardPwd = json.getJSONObject("data").getString("cardPwd");
        rpcCommonService.rpcPayOrderService.updateCardPwdByOrderId(payOrder.getPayOrderId(), cardPwd);

        // 更新收款账号信息，并且判断账号是否收款成功
        ZHshAccount zHshAccount = rpcCommonService.rpcZHshAccountService.selectByPhone(phone);
        zHshAccount.setTodayMoney(zHshAccount.getTodayMoney() + payOrder.getAmount());
        zHshAccount.setTotalMoney(zHshAccount.getTotalMoney() + payOrder.getAmount());
        // 如果收款金额达到日限额或者账号限额，状态设置为限额
        if (zHshAccount.getTodayMoney() > zHshAccount.getLimitDayMoney() || zHshAccount.getTotalMoney() >= zHshAccount.getLimitMaxMoney()){
            zHshAccount.setState((byte) 3);
        }
        int update = rpcCommonService.rpcZHshAccountService.update(zHshAccount);

        // 更新订单为支付成功状态
        int result = rpcCommonService.rpcPayOrderService.updateStatus4Success(payOrder.getPayOrderId());

        // 通知业务
        if (result == 1 && update == 1) {
            // 通知业务系统
            baseNotify4MchPay.doNotify(payOrder, true);
            // 删除redis的Key
            RedisUtil.del(key);
        }
    }
}
